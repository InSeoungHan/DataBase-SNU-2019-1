/* Generated By:JavaCC: Do not edit this line. SimpleDBMSParser.java */
//importimport com.sleepycat.je.Database;
import com.sleepycat.je.DatabaseException;
import com.sleepycat.je.DatabaseConfig;
import com.sleepycat.je.DatabaseEntry;
import com.sleepycat.je.Cursor;
import com.sleepycat.je.Environment;
import com.sleepycat.je.EnvironmentConfig;
import com.sleepycat.je.LockMode;
import com.sleepycat.je.OperationStatus;

import java.io.File;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Iterator;
import custom.*;

import com.sleepycat.bind.EntryBinding;
import com.sleepycat.bind.serial.StoredClassCatalog;
import com.sleepycat.bind.serial.SerialBinding;

public class SimpleDBMSParser implements SimpleDBMSParserConstants {
  /*Query Comments Number */
  public static final int PRINT_SYNTAX_ERROR = -1;
  public static final int CREATE_TABLE_SUCCESS = 0;
  public static final int DUPLICATE_COLUMN_DEF_ERROR = 1;
  public static final int DUPLICATE_PRIMARYKEY_DEF_ERROR = 2;
  public static final int REFERENCE_TYPE_ERROR = 3;
  public static final int REFERENCE_NON_PRIMARYKEY_ERROR = 4;
  public static final int REFERENCE_COLUMN_EXISTENCE_ERROR = 5;
  public static final int REFERENCE_TABLE_EXISTENCE_ERROR = 6;
  public static final int NON_EXISTING_COLUMN_DEF_ERROR = 7;
  public static final int TABLE_EXISTENCE_ERROR = 8;
  public static final int DROP_SUCCESS = 9;
  public static final int DROP_REFERENCED_TABLE_ERROR = 10;
  public static final int SHOW_TABLES_NO_TABLE = 11;
  public static final int NO_SUCH_TABLE = 12;
  public static final int CHAR_LENGTH_ERROR = 13;


  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC = 3;
  public static final int PRINT_SHOW_TABLES = 4;
  public static final int PRINT_SELECT = 5;
  public static final int PRINT_INSERT = 6;
  public static final int PRINT_DELETE = 7;

  // Environment & Database define  public static Environment myDbEnvironment = null;
  public static Database myDatabase = null;
  public static Database myClassDb = null;
  public static StoredClassCatalog classCatalog = null;
  public static EntryBinding dataBinding = null;

  public static void main(String args[]) throws ParseException
  {
    /* OPENING DB */
        // Open Database Environment or if not, create one.        EnvironmentConfig envConfig = new EnvironmentConfig();
        envConfig.setAllowCreate(true);
        myDbEnvironment = new Environment(new File("db/"), envConfig);

        // Open Database or if not, create one.        DatabaseConfig dbConfig = new DatabaseConfig();
        dbConfig.setAllowCreate(true);
        dbConfig.setSortedDuplicates(false);
        myDatabase = myDbEnvironment.openDatabase(null, "tables", dbConfig);

        // Open Database for 'Table' class information or if not, create one.        dbConfig.setSortedDuplicates(false);
        myClassDb = myDbEnvironment.openDatabase(null, "classDb", dbConfig);
    classCatalog = new StoredClassCatalog(myClassDb);
        dataBinding = new SerialBinding(classCatalog, Table.class);

    SimpleDBMSParser parser = new SimpleDBMSParser(System.in);
    System.out.print("DB_2014-10469> ");

    while (true)
    {
      try
      {
        parser.command();

      }
      catch (Exception e)
      {
        printMessage(PRINT_SYNTAX_ERROR, "");
        //System.out.println(e.getMessage()); // for Debug, if you remove comment symbol, you can see what token is not matched when error comes.        SimpleDBMSParser.ReInit(System.in);
      }
    }
  }
  /* describe table */
  public static void desc(String table_name)
  {
    Table table;
    Cursor cursor = null;
    DatabaseEntry foundKey;
        DatabaseEntry foundData;
        //Get the table which name is 'table_name' from database        try {
                foundKey = new DatabaseEntry(table_name.getBytes("UTF-8"));
                foundData = new DatabaseEntry();
            cursor = myDatabase.openCursor(null, null);
            //Check if there is at least one table in database                if(cursor.getSearchKey(foundKey, foundData, LockMode.DEFAULT) != OperationStatus.SUCCESS)
                {
                  printMessage(NO_SUCH_TABLE, "");
                }
                else
                {
                  //describe table                  String keyString = new String(foundKey.getData(), "UTF-8");
                  table = (Table) dataBinding.entryToObject(foundData);
                  System.out.println("-------------------------------------------------");
                  System.out.println("table_name [" + table.table_name + "]");
                  System.out.println("column_name          type          null          key          ");
                  Iterator it = table.attributes.iterator();
                  while(it.hasNext())
                  {
                    Attribute A = (Attribute) it.next();
                    String name = A.get_name();
                    String keydesc = "";
                        String type = A.get_type();
                        char is_null = 'N';
                        if(A.get_is_null())
                                is_null = 'Y';

                        if (type.equals("char"))
                                type = type + "(" + A.get_len() + ")";

                    if(table.is_primary_key(name))
                    {
                        keydesc += "PRI";
                    }
                    if(table.is_foreign_key(name))
                    {
                      if(keydesc.isEmpty())
                        keydesc += "FOR";
                      else
                        keydesc += "/FOR";
                    }
                        System.out.printf("%-21s%-14s%-14c%-14s\u005cn", name, type, is_null, keydesc);
                  }
                  System.out.println("-------------------------------------------------");
                }
        } catch (Exception e) {
          e.printStackTrace();
        } finally {
                cursor.close();
    }

  }
/* show all table's names in database */
  public static void showTables()
  {
    Table table;
    Cursor cursor = null;
    DatabaseEntry foundKey = new DatabaseEntry();
        DatabaseEntry foundData = new DatabaseEntry();

        try {
            cursor = myDatabase.openCursor(null, null);
            //Check if there is at least one table in database            if(cursor.getFirst(foundKey, foundData, LockMode.DEFAULT) != OperationStatus.SUCCESS)
                {
                  printMessage(SHOW_TABLES_NO_TABLE, "");

                }
                else
                {
                   //Show tables                    System.out.println("----------------");
                    do {
                      String keyString = new String(foundKey.getData(), "UTF-8");
                          System.out.println(keyString);
                        } while (cursor.getNext(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS);
                        System.out.println("----------------");
                }
        } catch (DatabaseException de) {
          System.err.println("Error accessing database." + de);
        } catch (UnsupportedEncodingException e) {
        } finally {
          cursor.close();
        }
  }
    /* remove Table from database */
        public static void dropTable(String table_name)
          {
            Table table;
            Cursor cursor = null;
            DatabaseEntry foundKey, foundData;
                try {
                    foundKey = new DatabaseEntry(table_name.getBytes("UTF-8"));
                        foundData = new DatabaseEntry();
                    cursor = myDatabase.openCursor(null, null);
                    //Check if target table is exist                        if(cursor.getSearchKey(foundKey, foundData, LockMode.DEFAULT) == OperationStatus.SUCCESS)
                        {
                          table = (Table) dataBinding.entryToObject(foundData); //table that you want to remove                          //Check if any table doesn't reference this table, So it can be removed                          if(table.referenced.isEmpty())
                          {
                            //remove references that target table is referencing                            Iterator it = table.referencing.iterator();
                                while(it.hasNext())
                                {
                                        String referenced_table_name = ((Reference) it.next()).refer_table;
                                        DatabaseEntry key = new DatabaseEntry(referenced_table_name.getBytes("UTF-8"));
                                        DatabaseEntry data = new DatabaseEntry();
                                    if(cursor.getSearchKey(key, data, LockMode.DEFAULT) == OperationStatus.SUCCESS)
                                    {
                                          Table referenced_table = (Table) dataBinding.entryToObject(data);
                                          referenced_table.referenced.remove(table_name);
                                          dataBinding.objectToEntry(referenced_table, data);
                                          cursor.putCurrent(data);
                                    }
                                }
                                //remove target table                                myDatabase.delete(null, foundKey);
                            printMessage(DROP_SUCCESS, table_name);
                          }
                          else
                          {
                            printMessage(DROP_REFERENCED_TABLE_ERROR, table_name);
                          }
                        }
                        else
                        {
                          printMessage(NO_SUCH_TABLE, "");
                        }
                } catch (DatabaseException de) {
                  System.err.println("Error accessing database." + de);
                } catch (UnsupportedEncodingException e) {
                } finally {
                  cursor.close();
            }

        }
  /* Add Table to database */
  public static void createTable(Table table)
  {
        Cursor cursor = null;
        DatabaseEntry key;
        DatabaseEntry data;
        ArrayList<String> referenced_tables = new ArrayList();
        try {
          cursor = myDatabase.openCursor(null, null);
          key = new DatabaseEntry(table.table_name.getBytes("UTF-8"));
          data = new DatabaseEntry();

          //check if target table is already exist          if(cursor.getSearchKey(key, data, LockMode.DEFAULT) == OperationStatus.SUCCESS)
          {
            printMessage(TABLE_EXISTENCE_ERROR, "");
            cursor.close();
            return;
          }


          //check constraints according to columns(attributes)          Iterator it;
          it = table.attributes.iterator();
      while(it.hasNext())
      {
        Attribute A = (Attribute) it.next();
        //check if column are not duplicated        if(table.is_attribute(A.get_name()) > 1)
            {
          printMessage(DUPLICATE_COLUMN_DEF_ERROR, "");
              cursor.close();
              return;
        }
        //type check(check 'char' type which length is smaller than 1)                if(A.get_type().equalsIgnoreCase("char") && (A.get_len() < 1))
                {
                  printMessage(CHAR_LENGTH_ERROR, "");
              cursor.close();
              return;
                }
      }

          //check if primary keys is actually in attributes          it = table.primary_keys.iterator();
          while(it.hasNext())
          {
            String primary_key = (String) it.next();
            if(table.is_attribute(primary_key) < 1)
            {
              printMessage(NON_EXISTING_COLUMN_DEF_ERROR, primary_key);
              cursor.close();
          return;
        }
        //if it is correct primary key, then corresponding attribute should be "not null"        Attribute A = table.get_attribute(primary_key);
        A.set_is_null(false);
          }

          /* check for foreign key constraints */
          it = table.referencing.iterator();
          while(it.hasNext())
          {
            Reference Reference = (Reference) it.next();
            //check if foreign keys is actually in attributes            Iterator it2 = Reference.refer_chaser_names.iterator();
            while(it2.hasNext())
            {
              String chaser = (String) it2.next();
              if(table.is_attribute(chaser) <  1)
              {
                printMessage(NON_EXISTING_COLUMN_DEF_ERROR, chaser);
                cursor.close();
            return;
              }
            }
                //check if the referenced table is actually exist            key = new DatabaseEntry(Reference.refer_table.getBytes("UTF-8"));
            data = new DatabaseEntry();

            if(cursor.getSearchKey(key, data, LockMode.DEFAULT) != OperationStatus.SUCCESS)
            {
              printMessage(REFERENCE_TABLE_EXISTENCE_ERROR, "");
              cursor.close();
              return;
            }

                //Check if reference column is actually exist and primary key                Table referenced_table = (Table) dataBinding.entryToObject(data);

                //collect table names of referenced table for later purpose(A)                referenced_tables.add(referenced_table.table_name);

            it2 = Reference.refer_target_names.iterator();
            while(it2.hasNext())
            {
              String target = (String) it2.next();
              if(referenced_table.is_attribute(target) <  1)
              {
                printMessage(REFERENCE_COLUMN_EXISTENCE_ERROR, "");
                cursor.close();
            return;
              }
              if(!referenced_table.is_primary_key(target))
              {
                printMessage(REFERENCE_NON_PRIMARYKEY_ERROR, "");
                cursor.close();
            return;
              }
            }

            //check if arities of referenced and referencing attributes are the same             int size = Reference.refer_target_names.size();

                //check if foreign keys reference all attributes in primary key                if(size != referenced_table.primary_keys.size())
                {
                  printMessage(REFERENCE_NON_PRIMARYKEY_ERROR, "");
                cursor.close();
            return;
            }

            if(size != Reference.refer_chaser_names.size())
            {
              printMessage(REFERENCE_TYPE_ERROR, "");
              cursor.close();
          return;
        }

        for(int i = 0; i < size; i++)
        {
          Attribute temp1 = table.get_attribute(Reference.refer_chaser_names.get(i));
          Attribute temp2 = referenced_table.get_attribute(Reference.refer_target_names.get(i));
          if(temp1.get_type().equalsIgnoreCase(temp2.get_type()) && temp1.get_len() == temp2.get_len())
                continue;
          else
          {
            printMessage(REFERENCE_TYPE_ERROR, "");
                cursor.close();
            return;
          }

        }


          }

          /*(A) adding table_name for referencing table to referenced table */
          it = referenced_tables.iterator();
          while(it.hasNext())
          {
                String table_name = (String) it.next();
                key = new DatabaseEntry(table_name.getBytes("UTF-8"));
                data = new DatabaseEntry();
                cursor.getSearchKey(key, data, LockMode.DEFAULT);
                Table referenced_table = (Table) dataBinding.entryToObject(data);
                referenced_table.referenced.add(table.table_name);
                dataBinding.objectToEntry(referenced_table, data);
                cursor.putCurrent(data);
          }

          /* create table */
          key = new DatabaseEntry(table.table_name.getBytes("UTF-8"));
          data = new DatabaseEntry();
      dataBinding.objectToEntry(table, data);
          cursor.put(key, data);
          printMessage(CREATE_TABLE_SUCCESS, table.table_name);
          cursor.close();
        } catch (DatabaseException de) {
          de.printStackTrace();
        } catch (UnsupportedEncodingException e) {
          e.printStackTrace();
        } catch (Exception g) {
          g.printStackTrace();
        }

  }
/* Close Database and exit */
  public static void readyToExit()
  {
    try {
                if (myClassDb != null) myClassDb.close();
                if (myDatabase != null) myDatabase.close();
                if (myDbEnvironment != null) myDbEnvironment.close();
        } catch(Exception e)
        {
          e.printStackTrace();
        }
        System.exit(0);
  }
/* print Messages and Errors */
        public static void printMessage(int q, String n)
        {
            switch(q)
            {
              case PRINT_SYNTAX_ERROR:
                System.out.println("Syntex Error");
                break;
              case CREATE_TABLE_SUCCESS:
                System.out.println("\u005c'" + n + "\u005c' table is created");
                break;
              case DUPLICATE_COLUMN_DEF_ERROR:
                System.out.println("Create table has failed: column definition is duplicated");
                break;
              case DUPLICATE_PRIMARYKEY_DEF_ERROR:
                System.out.println("Create table has failed: primary key definition is duplicated");
                break;
                  case REFERENCE_TYPE_ERROR:
                        System.out.println("Create table has failed: foreign key references wrong type");
                        break;
                  case REFERENCE_NON_PRIMARYKEY_ERROR:
                        System.out.println("Create table has failed: foreign key references non primary key column");
                        break;
                  case REFERENCE_COLUMN_EXISTENCE_ERROR:
                        System.out.println("Create table has failed: foreign key references non existing column");
                        break;
                  case REFERENCE_TABLE_EXISTENCE_ERROR:
                        System.out.println("Create table has failed: foreign key references non existing table");
                        break;
                  case NON_EXISTING_COLUMN_DEF_ERROR:
                        System.out.println("Create table has failed: \u005c'" + n + "\u005c' does not exists in column definition");
                        break;
                  case TABLE_EXISTENCE_ERROR:
                        System.out.println("Create table has failed: table with the same name already exists");
                        break;
                  case DROP_SUCCESS:
                        System.out.println("\u005c'" + n + "\u005c' table is dropped");
                        break;
                  case DROP_REFERENCED_TABLE_ERROR:
                        System.out.println("Drop table has failed: \u005c'" + n + "\u005c' is referenced by other table");
                        break;
                  case SHOW_TABLES_NO_TABLE:
                        System.out.println("There is no table");
                        break;
                  case NO_SUCH_TABLE:
                        System.out.println("No such table");
                        break;
                  case CHAR_LENGTH_ERROR:
                        System.out.println("Char length should be over 0");
                        break;




            }
            System.out.print("DB_2019-12345> ");
        }

//parse the whole SQL command  static final public void command() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
    case DROP_TABLE:
    case DESC:
    case SHOW_TABLES:
    case SELECT:
    case INSERT_INTO:
    case DELETE_FROM:
      queryList();
      break;
    case EXIT:
      jj_consume_token(EXIT);
      jj_consume_token(SEMICOLON);
      readyToExit();
      break;
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//parse querylist = > query;query;query;...//after parse each query, it print message according to query comment number  static final public void queryList() throws ParseException {
  int q;
  queryConfig qC = new queryConfig();
    label_1:
    while (true) {
      q = query(qC);
      jj_consume_token(SEMICOLON);
          switch(q)
          {
            case PRINT_CREATE_TABLE:
                //check if primary definition is more than 1 
                if(qC.primary_def_count > 1)
                {
                        printMessage(DUPLICATE_PRIMARYKEY_DEF_ERROR, "");
                        {if (true) return;}
                }
                createTable(qC.table);
                break;
                case PRINT_DROP_TABLE:
                        dropTable(qC.table_name);
                        break;
                case PRINT_DESC:
                        desc(qC.table_name);
                        break;
                case PRINT_SHOW_TABLES:
                        showTables();
                        break;
                case PRINT_SELECT:
                        break;
                case PRINT_INSERT:
                        break;
                case PRINT_DELETE:
                        break;
       }
       qC = new queryConfig();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case CREATE_TABLE:
      case DROP_TABLE:
      case DESC:
      case SHOW_TABLES:
      case SELECT:
      case INSERT_INTO:
      case DELETE_FROM:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
  }

// parse query  static final public int query(queryConfig qC) throws ParseException {
  int q;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE_TABLE:
      qC.primary_def_count = createTableQuery(qC.table);
      q = PRINT_CREATE_TABLE;
      break;
    case DROP_TABLE:
      qC.table_name = dropTableQuery();
          q = PRINT_DROP_TABLE;
      break;
    case DESC:
      qC.table_name = descQuery();
          q = PRINT_DESC;
      break;
    case SHOW_TABLES:
      showTablesQuery();
          q = PRINT_SHOW_TABLES;
      break;
    case SELECT:
      selectQuery();
          q = PRINT_SELECT;
      break;
    case INSERT_INTO:
      insertQuery();
          q = PRINT_INSERT;
      break;
    case DELETE_FROM:
      deleteQuery();
          q = PRINT_DELETE;
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      {if (true) return q;}
    throw new Error("Missing return statement in function");
  }

  static final public void deleteQuery() throws ParseException {
    jj_consume_token(DELETE_FROM);
    tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  static final public void insertQuery() throws ParseException {
    jj_consume_token(INSERT_INTO);
    tableName();
    insertColumnsAndSource();
  }

  static final public void insertColumnsAndSource() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT_PAREN:
      columnNameList();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
    valueList();
  }

  static final public void valueList() throws ParseException {
    jj_consume_token(VALUES);
    jj_consume_token(LEFT_PAREN);
    value();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      value();
    }
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NULL:
      jj_consume_token(NULL);
      break;
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      comparableValue();
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectQuery() throws ParseException {
    jj_consume_token(SELECT);
    selectList();
    tableExpression();
  }

  static final public void tableExpression() throws ParseException {
    fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHERE:
      whereClause();
      break;
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  static final public void whereClause() throws ParseException {
    jj_consume_token(WHERE);
    booleanValueExpression();
  }

  static final public void booleanValueExpression() throws ParseException {
    booleanTerm();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      booleanTerm();
    }
  }

  static final public void booleanTerm() throws ParseException {
    booleanFactor();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      booleanFactor();
    }
  }

  static final public void booleanFactor() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    booleanTest();
  }

  static final public void booleanTest() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case LEGAL_IDENTIFIER:
    case CHAR_STRING:
      predicate();
      break;
    case LEFT_PAREN:
      parenthesizedBooleanExpression();
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void parenthesizedBooleanExpression() throws ParseException {
    jj_consume_token(LEFT_PAREN);
    booleanValueExpression();
    jj_consume_token(RIGHT_PAREN);
  }

  static final public void predicate() throws ParseException {
    if (jj_2_1(4)) {
      comparisonPredicate();
    } else {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case LEGAL_IDENTIFIER:
        nullPredicate();
        break;
      default:
        jj_la1[12] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
  }

  static final public void nullPredicate() throws ParseException {
    if (jj_2_2(2)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    nullOperation();
  }

  static final public void nullOperation() throws ParseException {
    jj_consume_token(IS);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      jj_consume_token(NULL);
      break;
    case NULL:
      jj_consume_token(NULL);
      break;
    case NOT_NULL:
      jj_consume_token(NOT_NULL);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparisonPredicate() throws ParseException {
    compOperand();
    jj_consume_token(COMP_OP);
    compOperand();
  }

  static final public void compOperand() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
    case DATE_VALUE:
    case CHAR_STRING:
      comparableValue();
      break;
    case LEGAL_IDENTIFIER:
      if (jj_2_3(2)) {
        tableName();
        jj_consume_token(PERIOD);
      } else {
        ;
      }
      columnName();
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void comparableValue() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT_VALUE:
      jj_consume_token(INT_VALUE);
      break;
    case CHAR_STRING:
      jj_consume_token(CHAR_STRING);
      break;
    case DATE_VALUE:
      jj_consume_token(DATE_VALUE);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void fromClause() throws ParseException {
    jj_consume_token(FROM);
    tableReferenceList();
  }

  static final public void tableReferenceList() throws ParseException {
    referedTable();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_5;
      }
      jj_consume_token(COMMA);
      referedTable();
    }
  }

  static final public void referedTable() throws ParseException {
    tableName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      tableName();
      break;
    default:
      jj_la1[17] = jj_gen;
      ;
    }
  }

  static final public void selectList() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case STAR:
      jj_consume_token(STAR);
      break;
    case LEGAL_IDENTIFIER:
      selectedColumn();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case COMMA:
          ;
          break;
        default:
          jj_la1[18] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        selectedColumn();
      }
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void selectedColumn() throws ParseException {
    if (jj_2_4(2)) {
      tableName();
      jj_consume_token(PERIOD);
    } else {
      ;
    }
    columnName();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AS:
      jj_consume_token(AS);
      columnName();
      break;
    default:
      jj_la1[20] = jj_gen;
      ;
    }
  }

  static final public void showTablesQuery() throws ParseException {
    jj_consume_token(SHOW_TABLES);
  }

  static final public String descQuery() throws ParseException {
  String table_name;
    jj_consume_token(DESC);
    table_name = tableName();
  {if (true) return table_name;}
    throw new Error("Missing return statement in function");
  }

  static final public String dropTableQuery() throws ParseException {
  String table_name;
    jj_consume_token(DROP_TABLE);
    table_name = tableName();
  {if (true) return table_name;}
    throw new Error("Missing return statement in function");
  }

  static final public int createTableQuery(Table table) throws ParseException {
  int pdc = 0;
    jj_consume_token(CREATE_TABLE);
    table.table_name = tableName();
    pdc = tableElementList(table);
            {if (true) return pdc;}
    throw new Error("Missing return statement in function");
  }

  static final public int tableElementList(Table table) throws ParseException {
        int primary_def_count = 0;
        int temp;
    jj_consume_token(LEFT_PAREN);
    temp = tableElement(table);
    primary_def_count += temp;
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[21] = jj_gen;
        break label_7;
      }
      jj_consume_token(COMMA);
      temp = tableElement(table);
      primary_def_count += temp;
    }
    jj_consume_token(RIGHT_PAREN);
    {if (true) return primary_def_count;}
    throw new Error("Missing return statement in function");
  }

  static final public int tableElement(Table table) throws ParseException {
  Attribute attribute = new Attribute();
  int primary_def_count = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEGAL_IDENTIFIER:
      columnDefinition(attribute);
                table.attributes.add(attribute);
      break;
    case PRIMARY_KEY:
    case FOREIGN_KEY:
      primary_def_count = tableConstraintDefinition(table);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return primary_def_count;}
    throw new Error("Missing return statement in function");
  }

  static final public void columnDefinition(Attribute attribute) throws ParseException {
  String temp;
    temp = columnName();
    attribute.set_name(temp);
    dataType(attribute);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT_NULL:
      jj_consume_token(NOT_NULL);
      attribute.set_is_null(false);
      break;
    default:
      jj_la1[23] = jj_gen;
      ;
    }
  }

  static final public int tableConstraintDefinition(Table table) throws ParseException {
        int primary_def_count = 0;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case PRIMARY_KEY:
      primaryKeyConstraint(table);
      primary_def_count = 1;
      break;
    case FOREIGN_KEY:
      referentialConstraint(table);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
        {if (true) return primary_def_count;}
    throw new Error("Missing return statement in function");
  }

  static final public void primaryKeyConstraint(Table table) throws ParseException {
    jj_consume_token(PRIMARY_KEY);
    table.primary_keys = columnNameList();
  }

  static final public void referentialConstraint(Table table) throws ParseException {
        ArrayList<String> referencing;
        ArrayList<String> referenced;
        String reference_table;
        Reference temp = new Reference();
    jj_consume_token(FOREIGN_KEY);
    referencing = columnNameList();
    jj_consume_token(REFERENCES);
    reference_table = tableName();
    referenced = columnNameList();
    temp.refer_chaser_names = referencing;
    temp.refer_target_names = referenced;
    temp.refer_table = reference_table;
    table.referencing.add(temp);
  }

  static final public ArrayList<String> columnNameList() throws ParseException {
        ArrayList<String > list =  new ArrayList();
        String temp;
    jj_consume_token(LEFT_PAREN);
    temp = columnName();
    list.add(temp);
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case COMMA:
        ;
        break;
      default:
        jj_la1[25] = jj_gen;
        break label_8;
      }
      jj_consume_token(COMMA);
      temp = columnName();
      list.add(temp);
    }
    jj_consume_token(RIGHT_PAREN);
        {if (true) return list;}
    throw new Error("Missing return statement in function");
  }

  static final public void dataType(Attribute attribute) throws ParseException {
  String type = null;
  Token temp;
  Token length_temp;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      temp = jj_consume_token(INT);
      break;
    case CHAR:
      temp = jj_consume_token(CHAR);
      jj_consume_token(LEFT_PAREN);
      length_temp = jj_consume_token(INT_VALUE);
      attribute.set_len(Integer.parseInt(length_temp.toString()));
      jj_consume_token(RIGHT_PAREN);
      break;
    case DATE:
      temp = jj_consume_token(DATE);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                attribute.set_type(temp.toString());
                {if (true) return;}
  }

  static final public String tableName() throws ParseException {
  Token t;
    t = jj_consume_token(LEGAL_IDENTIFIER);
        {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public String columnName() throws ParseException {
        Token t;
    t = jj_consume_token(LEGAL_IDENTIFIER);
    {if (true) return t.toString();}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_3_4() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(39)) {
    jj_scanpos = xsp;
    if (jj_scan_token(47)) {
    jj_scanpos = xsp;
    if (jj_scan_token(42)) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_11()) return true;
    if (jj_scan_token(COMP_OP)) return true;
    if (jj_3R_11()) return true;
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(LEGAL_IDENTIFIER)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_10()) return true;
    if (jj_scan_token(PERIOD)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) return true;
    }
    return false;
  }

  static private boolean jj_3R_12() {
    if (jj_3R_14()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public SimpleDBMSParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[27];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x140f0220,0x140f0200,0x140f0200,0x400000,0x0,0x0,0x800,0x400000,0x800000,0x1000000,0x400,0x0,0x0,0x1c00,0x0,0x0,0x0,0x100000,0x0,0x20000000,0x100000,0x0,0x6000,0x1000,0x6000,0x0,0x1c0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x8,0x20,0x8480,0x0,0x0,0x0,0x0,0xa488,0x2000,0x0,0xa480,0x8480,0x20,0x0,0x20,0x2000,0x0,0x20,0x2000,0x0,0x0,0x20,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[4];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public SimpleDBMSParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public SimpleDBMSParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public SimpleDBMSParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new SimpleDBMSParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public SimpleDBMSParser(SimpleDBMSParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(SimpleDBMSParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 27; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[51];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 27; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 51; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 4; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
